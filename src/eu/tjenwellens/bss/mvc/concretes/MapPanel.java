/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MapPanel.java
 *
 * Created on Jan 18, 2012, 2:25:23 PM
 */
package eu.tjenwellens.bss.mvc.concretes;

import java.awt.Color;
import java.awt.Graphics;
import java.util.HashMap;
import java.util.List;
import eu.tjenwellens.bss.GameConstants;
import eu.tjenwellens.bss.Position;
import eu.tjenwellens.bss.factions.Faction;
import eu.tjenwellens.bss.map.GetTile;
import eu.tjenwellens.bss.mvc.view.View;
import eu.tjenwellens.bss.players.GetPlayer;

/**
 *
 * @author tjen
 */
public class MapPanel extends javax.swing.JPanel
{

    private View view;
    public List<Faction> factions;
    public GetTile[][] map;
    public HashMap<String, GetPlayer> players = new HashMap<String, GetPlayer>();

    /** Creates new form MapPanel */
    public MapPanel()
    {
        initComponents();
    }

    public void setView(View view)
    {
        this.view = view;
    }

    @Override
    public void paintComponent(Graphics g)
    {
//        Graphics g=null;
//        super.paintComponent(g);
        if (view != null)
        {
            updateData();
            if (map != null)
            {
                Color lineColor = Color.LIGHT_GRAY;
                int maprows = map.length;
                int mapcols = map[0].length;
                int tilew = (this.getWidth() / mapcols);
                int tileh = (this.getHeight() / maprows);
                for (int y = 0; y < map.length; y++)
                {
                    // raster _-_-
                    g.setColor(lineColor);
                    g.drawLine(0, y * tileh, map.length * tilew, y * tileh);
                    for (int x = 0; x < map[y].length; x++)
                    {
                        // raster | | |
                        g.setColor(lineColor);
                        g.drawLine(x * tilew, 0, x * tilew, map[0].length * tileh);
                        // tile
                        GetTile tile = map[y][x];
                        g.setColor(tile.getFaction().getColor());
                        g.fillRect(x * tilew, y * tileh, tilew, tileh);

                        // wall
                        if (tile.isWalled())
                        {
                            g.setColor(Color.black);
                            g.drawLine(x * tilew, y * tileh, x * tilew + tilew, y * tileh + tileh);
                            g.drawLine(x * tilew + tilew, y * tileh, x * tilew, y * tileh + tileh);
                        }
                    }
                }
                g.setColor(lineColor);
                for (int x = 0; x < map.length; x++)
                {
                    // raster _-_-
                    g.drawLine(x * tilew, 0, x * tilew, map[0].length * tileh);
                    for (int y = 0; y < map[x].length; y++)
                    {
                        // raster | | |
                        g.drawLine(0, y * tileh, map.length * tilew, y * tileh);
                    }
                }
            }
            if (players != null)
            {
                for (GetPlayer getPlayer : players.values())
                {
                    Position p = getPlayer.getPosition();
                    int mapw = GameConstants.MAP_WIDTH;
                    int maph = GameConstants.MAP_HEIGHT;
                    int panelWidth = this.getWidth();
                    int panelHeight = this.getHeight();
                    double xFactor = (double) panelWidth / (double) mapw;
                    double yFactor = (double) panelHeight / (double) maph;
                    int pSize = (int) ((double) GameConstants.PLAYER_RADIUS * (double) xFactor);
                    int x = (int) ((p.getX() + ((double) GameConstants.PLAYER_RADIUS / (double) 2)) * xFactor);
                    int y = (int) ((p.getY() + ((double) GameConstants.PLAYER_RADIUS / (double) 2)) * yFactor);
                    g.setColor(getPlayer.getFaction().getColor());
                    g.fillOval(x, y, pSize, pSize);
                }
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(500, 500));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private void updateData()
    {
        this.factions = view.factions;
        this.map = view.map;
        this.players = view.players;
    }
}
